#homing override
[gcode_macro G28]
rename_existing: G990028
gcode:
      {% if rawparams|length == 0 %}
           { action_respond_info("homing all") }
           G990028 Y
           G990028 X
           ## Homing with contactless probe with the homing_speed in [stepper_z]
           BDSENSOR_SET COLLISION_HOMING=0
           G990028 Z
           ## Homing with contact probe with the second_homing_speed in [stepper_z]
           BDSENSOR_SET COLLISION_HOMING=1
           G990028 Z
      {% else %}
            {% if 'y' in rawparams or 'Y' in rawparams  %}
                 { action_respond_info("homing y") }
                 G990028 Y
            {% endif %}
            
            {% if 'x' in rawparams or 'X' in rawparams  %}
                 { action_respond_info("homing x") }
                 G990028 X
            {% endif %}
            
            {% if 'z' in rawparams or 'Z' in rawparams  %}
                 { action_respond_info("homing z") }
                 ## Homing with contactless probe with the homing_speed in [stepper_z]
                 BDSENSOR_SET COLLISION_HOMING=0
                 G990028 Z
                 ## Homing with contact probe with the second_homing_speed in [stepper_z]
                 BDSENSOR_SET COLLISION_HOMING=1
                 G990028 Z
            {% endif %}
      {% endif %}
  

[gcode_macro HOME_X]
gcode:
  #G28 X0 F3600
  G990028 X0 F3600
  M118 X Homed
  
[gcode_macro HOME_Y]
gcode:
  #G28 Y0 F3600
  G990028 Y0 F3600
  M118 Y Homed

[gcode_macro HOME_Z]
gcode:
  G28 Z0 F3000
  #G990028 Z0 F3600
  M118 Z Homed

 #preheat
[gcode_macro PREHEAT]
description: InputField for the Print start Variable
gcode:
  POWER_ON_PRINTER
  POWER_ON_LIGHT
  POWER_ON_HOTBED
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(175)|float %} # this gives a user input field in case i want another temp for nozzle
  {% set EXTRUDER_TEMP1 = params.EXTRUDER_TEMP1|default(175)|float %} # this gives a user input field in case i want another temp for nozzle
  {% set HOTBED_TEMP = params.HOTBED_TEMP | default(60) | float %} # creates user input field
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE="{EXTRUDER_TEMP}" ; Save the User Parameter to global Variable
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp1 VALUE="{EXTRUDER_TEMP1}"
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=hotbed_temp VALUE="{HOTBED_TEMP}"
  M104 S{EXTRUDER_TEMP} T0
  M104 S{EXTRUDER_TEMP1} T1 # heats nozzles to value of extruder temp variable without waiting
  M140 S{HOTBED_TEMP}

  #start the print v2
[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

    #start print
[gcode_macro START_PRINT]
description: Macro to Prepare the printer to start
variable_extruder_temp: 210
variable_extruder_temp1: 210
variable_extruder_standby_temp: 175
variable_hotbed_temp: 60
variable_initial_extruder: 0
gcode:
  M104 S{extruder_standby_temp} T0
  M104 S{extruder_standby_temp} T1 # heats nozzles to value of extruder temp variable without waiting
  M140 S{hotbed_temp}
  G90
  G28 #homes all axis.
  G92 E0 #this resets extruder
  G1 Z50 F4000.0 #moves bed 50mm down
  #puts inatctive nozzle to standby temperature

  {% if initial_extruder == 0 %}
  T0
  M109 S{extruder_temp} T0
  M104 S{extruder_standby_temp} T1
  {% else %}
  T1
  M109 S{extruder_temp1} T1 # now waits to reach temp.
  M104 S{extruder_standby_temp} T0
  {% endif %}
  
  {% if 'EXTRUDER' in params %}
      {% set ext = params.EXTRUDER|default(EXTRUDER) %}
      {% if ext == "extruder"%}
        {action_respond_info("Switching to extruder0.")}
        M109 S{extruder_temp} T0
        M104 S{extruder_standby_temp} T1
      {% elif ext == "extruder1" %}
        {action_respond_info("Switching to extruder1.")}
        M109 S{extruder_temp1} T1 # now waits to reach temp.
        M104 S{extruder_standby_temp} T0
      {% else %}
        {action_respond_info("EXTRUDER value being passed.")}
        ACTIVATE_EXTRUDER_BASE EXTRUDER={ext}
      {% endif %}
    {% endif %}
  
  M190 S{hotbed_temp}
  
  #BED_MESH_CLEAR
  #BED_MESH_CALIBRATE
  #LINE_PURGE #from KAMP
  #PURGELINE
  #BAMBU_PURGE

#PurgeLine
[gcode_macro PURGELINE]
variable_initial_extruder: 0
gcode:
  M118 Primeline
  {% if initial_extruder == 0 %}
  T0
  {% else %}
  T1
  {% endif %}
  {% if 'EXTRUDER' in params %}
      {% set ext = params.EXTRUDER|default(EXTRUDER) %}
      {% if ext == "extruder"%}
        {action_respond_info("Switching to extruder0.")}
        {% set EXTRUDER_RATIO = printer.configfile.config.extruder.nozzle_diameter|float / 0.4 %} ; scale extrude amount based on nozzle size
        {% set LAYER_HEIGHT = printer.configfile.config.extruder.nozzle_diameter|float * 0.8 %}
      {% elif ext == "extruder1" %}
        {action_respond_info("Switching to extruder1.")}
        {% set LAYER_HEIGHT = printer.configfile.config.extruder1.nozzle_diameter|float * 0.8 %}
        {% set LAYER_HEIGHT = printer.configfile.config.extruder1.nozzle_diameter|float * 0.8 %}
      {% else %}
        {action_respond_info("EXTRUDER value being passed.")}
        ACTIVATE_EXTRUDER_BASE EXTRUDER={ext}
      {% endif %}
    {% endif %}
  # {% set EXTRUDER_RATIO = printer.configfile.config.extruder.nozzle_diameter|float / 0.4 %} ; scale extrude amount based on nozzle size
  # {% set LAYER_HEIGHT = printer.configfile.config.extruder.nozzle_diameter|float * 0.8 %} ;
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X1 Y1 Z{LAYER_HEIGHT} F5000.0 ; Move to start position
  G1 X1 Y25.0 Z{LAYER_HEIGHT} F300.0 E{10 * EXTRUDER_RATIO} ; Draw the first line
  #G1 X1.4 Y20.0 Z{LAYER_HEIGHT} F5000.0 ; Move to side a little
  G1 X1 Y50 Z{LAYER_HEIGHT} F300.0 E{5 * EXTRUDER_RATIO} ; Draw the second line
  G92 E0 ; Reset Extruder
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X5 Y20 Z{LAYER_HEIGHT} F5000.0 ; Move over to prevent blob squish
  M118 Nozzle Purged
  
[gcode_macro BAMBU_PURGE]
gcode:
  {% set EXTRUDER_RATIO = printer.configfile.config.extruder.nozzle_diameter|float / 0.4 %} ; scale extrude amount based on nozzle size
  {% set LAYER_HEIGHT = printer.configfile.config.extruder.nozzle_diameter|float * 0.8 %} ;
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G0 X5 Y5 Z{LAYER_HEIGHT} F5000.0  ; Move to start position
  G0 Y10 E10  F{outer_wall_volumetric_speed/(24/20)    * 60}
  G0 Y15 E.3742  F{outer_wall_volumetric_speed/(0.3*0.5)/4     * 60}
  G0 Y20 E.3742  F{outer_wall_volumetric_speed/(0.3*0.5)     * 60}
  G0 Y25 E.3742  F{outer_wall_volumetric_speed/(0.3*0.5)/4     * 60}
  G0 Y30 E.3742  F{outer_wall_volumetric_speed/(0.3*0.5)     * 60}
  G0 Y35 E.3742  F{outer_wall_volumetric_speed/(0.3*0.5)/4     * 60}
  G92 E0 ; Reset Extruder
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X5 Y20 Z{LAYER_HEIGHT} F5000.0 ; Move over to prevent blob squish
  M118 Nozzle Purged
  
    
[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0 T0
    M104 S0 T1
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-6 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    G28 X
    G28 Y
    #Fan
    M106 S255
    # Disable steppers
    M84

[gcode_macro SEARCH_VARS]
#
# SEARCH_VARS
#
# Dump the printer object so you can find variables of interest
# Credit to https://gist.github.com/mpalpha/ for the original
#
description: Dump the printer object to the console
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
    
[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="ultimaker_power", state="off"
  )}
  M118 Printer Off
  
[gcode_macro POWER_ON_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="ultimaker_power", state="on"
  )}
  M118 Printer On
  
[gcode_macro POWER_OFF_LIGHT]
gcode:
  {action_call_remote_method(
    "set_device_power", device="ultimaker_light", state="off"
  )}
  M118 Light Off

[gcode_macro POWER_ON_LIGHT]
gcode:
  {action_call_remote_method(
    "set_device_power", device="ultimaker_light", state="on"
  )}
  M118 Light on

[gcode_macro POWER_OFF_HOTBED]
gcode:
  {action_call_remote_method(
    "set_device_power", device="ultimaker_hotbed", state="off"
  )}
  M118 Hotbed Off

[gcode_macro POWER_ON_HOTBED]
gcode:
  {action_call_remote_method(
    "set_device_power", device="ultimaker_hotbed", state="on"
  )}
  M118 Hotbed on

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
    POWER_OFF_LIGHT
    POWER_OFF_HOTBED
  {% endif %}

[idle_timeout]
gcode:
  M84
  #TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

[gcode_macro SDCARD_PRINT_FILE]
rename_existing: SDCPF
gcode:
   # Step 1: Call the remote method to turn on the power device
   POWER_ON_PRINTER
   POWER_ON_LIGHT
   POWER_ON_HOTBED
   # Step 2: Pause while the device powers up.  The following example
   # pauses for 4 seconds.  It may be necessary to tweak this value.
   G4 P1000
   # Step 3: Call the renamed command to start the print
   SDCPF {rawparams}


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD_FILAMENT]
gcode:
    POWER_ON_PRINTER
    POWER_ON_LIGHT
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %} # this gives a user input field in case i want another temp for nozzle
    {% set EXTRUDER_TEMP1 = params.EXTRUDER_TEMP1|default(210)|float %} # this gives a user input field in case i want another temp for nozzle
    M109 S{EXTRUDER_TEMP} T0
    M109 S{EXTRUDER_TEMP1} T1 
    
    #M300 # beep
    #PREHEAT
    G91
    G92 E0
    G1 600 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %} # this gives a user input field in case i want another temp for nozzle
    {% set EXTRUDER_TEMP1 = params.EXTRUDER_TEMP1|default(210)|float %} # this gives a user input field in case i want another temp for nozzle
    M109 S{EXTRUDER_TEMP} T0
    M109 S{EXTRUDER_TEMP1} T1 
    
    #PREHEAT
    G91
    #M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-600 F{max_velocity} # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro SET_MATERIAL]
description: Set values based on material type
variable_material: ''
gcode:
    {% set MATERIAL = params.MATERIAL|default('PLA')|string %} ; Get material type from slicer
    #SET_GCODE_VARIABLE MACRO=SET_MATERIAL VARIABLE=material VALUE='"{MATERIAL}"' ; Save the material type to a variable just because
    {% if MATERIAL == 'PLA' %} ; If material type is PLA
       # BED_MESH_PROFILE LOAD="pla_mesh" ; Load bed mesh
       # SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
       # SET_GCODE_OFFSET Z=0 ; Set z_offset
       # SET_VELOCITY_LIMIT VELOCITY=100 ACCEL=2000 ; Set max speed/acceleration
       # SET_INPUT_SHAPER SHAPER_FREQ_X=58.6 SHAPER_FREQ_Y=34.2 SHAPER_TYPE_X=mzv SHAPER_TYPE_Y=mzv ; Set input_shaper
    {% elif MATERIAL == 'ABS' %} ; If material type is ABS
      #  BED_MESH_PROFILE LOAD="abs_mesh" ; Load bed mesh
      #  SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
      #  SET_GCODE_OFFSET Z=0 ; Set z_offset
    {%else %} ; If any other material type
    #    BED_MESH_PROFILE LOAD="default" ; Load bed mesh
     #   SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
     #   SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% endif %}




## Set nozzle-specific Configs
## 
## Add this immediately after your start_print line of the start gcode in Prusa/SuperSlicer:
##     SET_NOZZLE NOZZLE='{nozzle_diameter[initial_extruder]}'
## 
## Add this immediately after your start_print line of the start gcode in Cura:
##     SET_NOZZLE NOZZLE='{machine_nozzle_size}'
## 
# [gcode_macro SET_NOZZLE]
# description: Set values based on nozzle diameter
# variable_nozzle: 0
# gcode:
#     {% set NOZZLE = params.NOZZLE|default(0.4)|float %} ; Get nozzle diameter from slicer
#     SET_GCODE_VARIABLE MACRO=SET_NOZZLE VARIABLE=nozzle VALUE={NOZZLE} ; Save the nozzle diameter to a variable just because
#     {% if NOZZLE == 0.4 %} ; If nozzle diameter is 0.4
#         ## Set z_offset settings
#         SET_GCODE_OFFSET Z=0 ; Set z_offset
#     {% elif NOZZLE == 0.2 %} ; If nozzle diameter is 0.2
#         SET_GCODE_OFFSET Z=0 ; Set z_offset
#     {%else %} ; If any other nozzle diameter
#         SET_GCODE_OFFSET Z=0 ; Set z_offset
#     {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    M117 Print Canceled 
    STATUS_ERROR
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        {% if printer.toolhead.homed_axes == "xyz" %}
            _TOOLHEAD_PARK_PAUSE_CANCEL
        {% endif %}
    {% endif %}
    game_over_tune
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro PAUSE_PARK]
gcode:
    {% set default_x = printer.toolhead.axis_minimum.x + 5 %}
    {% set default_y = printer.toolhead.axis_maximum.y %}

    {% if 'save_variables' in printer %}
        {% set svv = printer.save_variables.variables %}
        {% if 'park_x' in svv %}
        {% set default_x = svv.park_x %}
        {% endif %}
        {% if 'park_y' in svv %}
        {% set default_y = svv.park_y %}
        {% endif %}
    {% endif %}

    {% set x = params.X|default(default_x)|float %}
    {% set y = params.Y|default(default_y)|float %}
    {% set z = params.Z|default(20)|float %}
    {% set r = params.R|default(3)|float %}

    {% if printer.pause_resume.is_paused %}
        {action_respond_info("Already paused")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        PAUSE
        {% if r > 0.0 %}
        RETRACT D={r}
        {% endif %}
        G27 X{x} Y{y} Z{z}
    {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro HOME_IF_NEEDED]
variable_output: 116
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% if "x" in rawparams|string|lower %}
        {% set X = True %}
    {% endif %}
    {% if "y" in rawparams|string|lower %}
        {% set Y = True %}
    {% endif %}
    {% if "z" in rawparams|string|lower %}
        {% set Z = True %}
    {% endif %}
    {% if rawparams|string|lower == "" %}
        {% set ALL = True %}
        {% set X = True %}
        {% set Y = True %}
        {% set Z = True %}
    {% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %}
        {% if printcfg.led_status == True %}
            {printcfg.homing_status}
        {% endif %}
        {% if "x" not in printer.toolhead.homed_axes %}
            {% set home_x = True %}
        {% endif %}
        {% if "y" not in printer.toolhead.homed_axes %}
            {% set home_y = True %}
        {% endif %}
        {% if "z" not in printer.toolhead.homed_axes %}
            {% set home_z = True %}
        {% endif %}

        {% if home_x == True and home_y == True and home_z == True %}
            {% if ALL == True %}
                M{output} Homing all axes
                G28
            {% else %}
                {% if X == True %}
                    M{output} Homing X axis
                    G28 X
                {% endif %}
                {% if Y == True %}
                    M{output} Homing Y axis
                    G28 Y
                {% endif %}
                {% if Z == True %}
                    M{output} Homing Z axis
                    G28 Z
                {% endif %}
            {% endif %}
        {% else %}
            {% if home_x == True %}
                {% if X == True %}
                    M{output} Homing X axis
                    G28 X
                {% endif %}
            {% endif %}
            {% if home_y == True %}
                {% if Y == True %}
                    M{output} Homing Y axis
                    G28 Y
                {% endif %}
            {% endif %}
            {% if home_z == True %}
                {% if Z == True %}
                    M{output} Homing Z axis
                    G28 Z
                {% endif %}
            {% endif %}
        {% endif %}
        {% if printcfg.led_status == True %}
            {printcfg.ready_status}
        {% endif %}
    {% else %}
        M{output} All axes are homed
    {% endif %}